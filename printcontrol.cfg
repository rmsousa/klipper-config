[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 1800     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
gcode:

[pause_resume]

[exclude_object]

[idle_timeout]
timeout: 1800
gcode:
    TURN_OFF_HEATERS
    TURN_OFF_FANS
    M84

[gcode_macro PRINT_START]
variable_wait_minutes: -1
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    CLEAR_PAUSE
    RESET_FAN_TIMER
    SET_LIGHT_STATE STATE="HEATING_BED"
    M140 S{params.BED}
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.5
    SET_FAN_SPEED FAN=nevermore SPEED=1
    M117 Homing
    G28
    G0 X150 Y150 Z30 F3600
    M117 Bed -> {params.BED}
    M190 S{params.BED}
    SET_LIGHT_STATE STATE="HEATING_CHAMBER"
    {% set wait_mins = params.WAIT_MINUTES|default(wait_minutes) %}
    {% if wait_mins < 0 %}
        {% set wait_mins = params.BED|float / 20 %} ; Default to a wait dependent on bed temperature
    {% endif %}
    M117 Soaking for {wait_mins}m
    G4 P{wait_mins * 60 * 1000}
    {% if params.CHAMBER %}
        M117 Chamber -> {params.CHAMBER}
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={params.CHAMBER}
    {% endif %}
    M117 Leveling
    HOME_LEVEL                             ; home and QGL
    {% if params.BED|float > 75 %}
        BED_MESH_PROFILE LOAD=abs
    {% elif params.BED|float > 40 %}
        BED_MESH_PROFILE LOAD=pla
    {% else %}
        BED_MESH_PROFILE LOAD=cold
    {% endif %}
    M117 Extruder -> {params.EXTRUDER}
    M109 S{params.EXTRUDER}
    M117 Cleaning
    CLEAN_NOZZLE
    G28 Z                           ; home Z with hot extruder
    # M117 Calibrating Z
    # CALIBRATE_Z
    M117
    G0 X150 Y150 Z30 F3600
    SET_LIGHT_STATE STATE="PRINTING"


[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    STOP_PRINTING

[gcode_macro STOP_PRINTING]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    _TOOLHEAD_PARK_PAUSE_CANCEL
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    RUN_FANS DURATION=900